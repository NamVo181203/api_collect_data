import gradio as gr
import numpy as np
import scipy.io.wavfile as wavfile
import soundfile as sf
import time
import uuid
import os
import csv
from supabase import create_client

# Supabase
url = "https://eecucubpmvpjkhqletul.supabase.co"
key = "eyJhbGciOi..."  # C·∫©n th·∫≠n kh√¥ng chia s·∫ª publicly!
# DB = create_client(supabase_url=url, supabase_key=key)


def local_storage_set(key, value):
    value = json.dumps(value, ensure_ascii=False)  # Convert to JSON string
    st_javascript(f"localStorage.setItem('{key}', {value});")


# Function to get a value from localStorage
def local_storage_get(key):
    return st_javascript(f"localStorage.getItem('{key}');")


def get_transcripts(path: str):
    samples = []
    with open(path, newline='', encoding='utf-8') as csvfile:
        reader = csv.reader(csvfile)
        next(reader)
        for row in reader:
            samples.append(f"{row[0]} - {row[1]}")
    return samples


def get_provinces(path):
    provinces = []
    with open(path, newline='', encoding='utf-8') as csvfile:
        reader = csv.reader(csvfile)
        next(reader)
        for row in reader:
            provinces.append(f"{row[0]}")
    return provinces


def save_data(audio, transcript, age, gender, region):
    if age < 1:
        return "‚ö†Ô∏è B·∫°n c·∫ßn nh·∫≠p ƒë√∫ng s·ªë tu·ªïi."

    if not transcript or not gender or not region.strip():
        return "‚ö†Ô∏è B·∫°n c·∫ßn nh·∫≠p ƒë·∫ßy ƒë·ªß c√°c th√¥ng tin: C√¢u tho·∫°i, Gi·ªõi t√≠nh v√† T·ªânh/TP."

    if audio is None:
        return "‚ö†Ô∏è Vui l√≤ng ghi √¢m tr∆∞·ªõc khi l∆∞u."

    session_id = str(uuid.uuid4())
    audio_array = np.frombuffer(audio[-1], dtype=np.int16)
    filename = f"upload/recorded_audio_{int(time.time())}.wav"
    wavfile.write(filename, 44100, audio_array)

    DB.storage.from_("cs-bucket").upload(file=filename, path=f"{filename}", file_options={"content-type": "audio/wav"})
    url = DB.storage.from_("cs-bucket").get_public_url(path=f"{filename}")

    word = transcript.split("-")[0]
    transcript_text = transcript.split("-")[1]

    DB.table("cs-data").insert({
        "user_id": session_id,
        "audio_url": url,
        "word": word,
        "transcript_text": transcript_text,
        "age": age,
        "gender": gender,
        "region": region.strip()
    }).execute()

    if os.path.exists(filename):
        os.remove(filename)

    return "‚úÖ D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng. C·∫£m ∆°n b·∫°n!"


transcripts = get_transcripts("scripts.csv")
provinces = get_provinces("vietnam_provinces.csv")

with gr.Blocks(theme=gr.themes.Soft()) as demo:
    gr.Markdown("""
    <h1 style="
        font-size: 32px;
        text-align: center;
    ">
    üé§ ·ª®ng d·ª•ng ghi √¢m v√† thu th·∫≠p d·ªØ li·ªáu
    </h1>
    """)

    with gr.Row():
        with gr.Column(scale=3):
            transcript = gr.Dropdown(label="Ch·ªçn c√¢u tho·∫°i", choices=transcripts)
            age = gr.Number(label="Tu·ªïi")
            gender = gr.Dropdown(label="Gi·ªõi t√≠nh", choices=["Nam", "N·ªØ"])
            region = gr.Dropdown(label="T·ªânh/TP", choices=provinces)
            audio = gr.Audio(sources="microphone", type="numpy", label="Ghi √¢m t·∫°i ƒë√¢y")
            submit_btn = gr.Button("L∆∞u d·ªØ li·ªáu")
            output = gr.Textbox(label="Th√¥ng b√°o")
            submit_btn.click(save_data, inputs=[audio, transcript, age, gender, region], outputs=output)

        with gr.Column(scale=2):
            gr.Markdown("<h3 style='font-size: 22px'>üìå H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng</h3>")
            gr.Markdown("""
            <div style="font-size: 18px">
            <b>B∆∞·ªõc 1:</b> Ch·ªçn ƒëo·∫°n tho·∫°i b·∫°n mu·ªën ghi √¢m trong h·ªôp g·ª£i √Ω.<br>
            <b>B∆∞·ªõc 2:</b> ƒêi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin (<i>tu·ªïi, gi·ªõi t√≠nh, t·ªânh/th√†nh</i>).<br>
            <b>B∆∞·ªõc 3:</b> B·∫•m <b>Start Recording</b> ƒë·ªÉ ghi √¢m, sau ƒë√≥ b·∫•m <b>Stop</b> v√† nghe l·∫°i.<br>
            <b>B∆∞·ªõc 4:</b> N·∫øu ghi √¢m b·ªã l·ªói ho·∫∑c thi·∫øu, b·∫•m <b>Reset</b> ƒë·ªÉ ghi l·∫°i.<br>
            <b>B∆∞·ªõc 5:</b> B·∫•m <b>‚ÄúL∆∞u d·ªØ li·ªáu‚Äù</b> ƒë·ªÉ g·ª≠i ghi √¢m v·ªÅ cho nh√≥m ph√°t tri·ªÉn.<br><br>

            <span style="color: red">üîä L∆∞u √Ω:</span> B·∫°n c√≥ th·ªÉ ph√°t √¢m t·ª´ ti·∫øng Anh theo ki·ªÉu Vi·ªát h√≥a.<br>
            V√≠ d·ª•: <code>ability</code> ‚Üí <i>·ªù bi li ti</i><br><br>
            üëâ H√£y c·ªë g·∫Øng gi√∫p ghi √¢m <b>5 c√¢u</b> n·∫øu c√≥ th·ªÉ nh√©! C·∫£m ∆°n s·ª± gi√∫p ƒë·ª° c·ªßa b·∫°n 
            </div>
            """)

demo.launch()
